name: assignment3

on:
  push:
    branches: [ ci ]
  pull_request:
  workflow_dispatch:

env:
  IMAGE_NAME: frontend
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log Start Time
        id: log_start_time
        run: |
          echo "Start time: $(date -Iminutes)" >> log.txt
          echo "Hadar Sonego" >> log.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        id: build_image
        uses: docker/build-push-action@v5
        with:
          context: bookshop
          file: bookshop/Dockerfile
          outputs: type=docker,dest=/tmp/bookshop_image.tar
          tags: bookshop_image:latest

      - name: list files
        run: ls -al

      - name: Check Build Status and Log
        run: |
          if [ "${{ steps.build_image.outcome }}" == "success" ]; then
            echo "image successfully built" >> log.txt
          else
            echo "image not able to be built" >> log.txt
          fi

#      - name: Load Docker Image
#        run: docker load -i /tmp/bookshop_image.tar

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: bookshop-image
          path: /tmp/bookshop_image.tar

      - name: Upload Log Artifact
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: log.txt
  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: bookshop-image
          path: /tmp

      - name: Download Log Artifact
        uses: actions/download-artifact@v4
        with:
          name: log

      - name: list files
        run: ls -al /tmp

      - name: Load Docker Image
        run: docker load -i /tmp/bookshop_image.tar
      - name: Run MongoDB Container
        run: docker run -d --name mongodb --network host mongo:latest

      - name: Wait for MongoDB to be Ready
        run: |
          echo "Waiting for MongoDB to be ready..."
          while ! nc -z localhost 27017; do
            echo "MongoDB is not ready yet"
            sleep 1
          done
          echo "MongoDB is ready"

      - name: Run Docker Container
        run: docker run -d --name bookshop_container --network host bookshop_image:latest

      - name: Wait for Container to be Ready
        run: |
          echo "Waiting for the container to be ready..."
          sleep 10

      - name: Check Container Status
        run: |
          if [ $(docker inspect -f '{{.State.Running}}' bookshop_container) = "true" ]; then
            echo "Container up and running" >> log.txt
          else
            echo "Container failed to run" >> log.txt
          fi

      - name: curl to check if container is working
        run: |
          curl -X GET http://127.0.0.1:5001/books

      - name: Install pytest
        run: pip install pytest

      - name: Run Pytest
        id: run_pytest
        run: |
          pytest -v tests/assn3_tests.py > assn3_test_results.txt
        continue-on-error: true

      - name: Check Test Results
        run: |
          if grep -q "failed" assn3_test_results.txt; then
            echo "tests failed" >> log.txt
          else
            echo "tests succeeded" >> log.txt
          fi

      - name: Upload Pytest Results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: assn3_test_results.txt

      - name: Upload Log Artifact
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: log.txt
          overwrite: true

  query:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: bookshop-image
          path: /tmp

#      - name: Download Log Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: log

      - name: Load Docker Image
        run: docker load -i /tmp/bookshop_image.tar

      - name: Run MongoDB Container
        run: docker run -d --name mongodb --network host mongo:latest

      - name: Wait for MongoDB to be Ready
        run: |
          echo "Waiting for MongoDB to be ready..."
          while ! nc -z localhost 27017; do
            echo "MongoDB is not ready yet"
            sleep 1
          done
          echo "MongoDB is ready"

      - name: Run Docker Container
        run: docker run -d --name bookshop_container --network host bookshop_image:latest

      - name: Wait for Container to be Ready
        run: sleep 10

      - name: Add Books
        run: |
          books=(
            '{"title":"Adventures of Huckleberry Finn", "ISBN":"9780520343641", "genre":"Fiction"}'
            '{"title":"The Best of Isaac Asimov", "ISBN":"9780385050784", "genre":"Science Fiction"}'
            '{"title":"Fear No Evil", "ISBN":"9780394558783", "genre":"Biography"}'
            '{"title":"The Adventures of Tom Sawyer", "ISBN":"9780195810400", "genre":"Fiction"}'
            '{"title":"I, Robot", "ISBN":"9780553294385", "genre":"Science Fiction"}'
            '{"title":"Second Foundation", "ISBN":"9780553293364", "genre":"Science Fiction"}'
          )
          for book in "${books[@]}"; do
            curl -X POST -H "Content-Type: application/json" -d "$book" http://localhost:5001/books
          done

      - name: Read Query and Execute
        run: |
          touch response.txt
          while IFS= read -r query; do
            response=$(curl -s -w "\n%{http_code}" "http://localhost:5001/books$query")
            code=$(echo "$response" | tail -n 1)
            body=$(echo "$response" | sed '$d')
            echo "query: $query" >> response.txt
            if [ "$code" -eq 200 ]; then
              echo "response: $body" >> response.txt
            else
              echo "response: error $code" >> response.txt
            fi
          done < query.txt

      - name: Upload Response Artifact
        uses: actions/upload-artifact@v4
        with:
          name: response
          path: response.txt